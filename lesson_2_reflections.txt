the OS hides files with a period in front of the name like .git and these files can be seen using ls -a  

What happens when you initialize a repository? Why do you need to do it?

A git repository is created. This creates a new repository to store commits and track their changes, along with 
the necessary metadata.

Use git add to add a files to the staging area to be committed. If you accidentally add a file to the staging area, you can remove it using git reset. For example, if you accidentally add lesson_2_reflections.txt, but donâ€™t want it to be committed yet, run git reset lesson_2_reflections.txt and the file will be removed from the staging area, but it will still be in your working directory.

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is different in that it is not a final recording like that of a created working directory or 
repository. It serves as an intermediate area to ensure that you  commit exactly what you intend to.


git diff compares the most recent versions of the working directory and the staging area
git diff --staged compares the most recent versions of the staging area and commit1 (the most recent commit)
git diff id1 id2 compares two commits with the most recent commit id specificied first

How can you use the staging area to make sure that you have one commit per logical change?

You can specify the files/changes that you want to commit by using git add filename(s)

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

When I want to test if I would prefer a slightly different version of my code, add a new feature, or an experimental version and none of these are production ready or if I wanted to record the code in another language but keep the main code in English. Branches are effective here because I get to maintain two versions of the code at the same level. It allows you to work with others on a project at the same time.

HEAD means current commit

git checkout -b new_branch_name allows you to commit changes made on an experimental commit to a new branch

How do the diagrams help you visualize the branch structure?

The diagrams help to see how the commits are connected; particularly the parent or each commit and what commits will
be seen in the log of a particular branch.

What is the result of merging 2 branches together? Why do we represent it in the diagram the way we do?

All the changes in in the 2 branches are updated into a new master branch. It is represented in the diagram in that
way in order to visualize how the commits and their parents are connected.

What are the pros and cons of Git's automatic merging always doing merges manually?

Some pros are that it saves time and automates the process eliminating potential human error. Some cons are that
similar changes may cause an incorrect change to be committed.